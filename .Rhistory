identical(vect,vect2)
vect["bar"]
vect[c("foo,"bar")]
names(vector) <- vect[c("foo","bar")]
name <- vect[c("foo","bar")]
vect[c("foo","bar")
;
info()
names(vect[c("foo","bar")])
info()
vect[c("foo","bar")]
myVector <- c(1:20)
myVector <- 1:20
myVector
dim(myVector)
length(myVector)
dim(myVector) <- c(4,5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix <- myVector
?matrix()
?matrix
myMatrix2 <- matrix(myVector, nrow=4, ncol=5)
myMatrix2
identical(myMatrix,myMatrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,myMatrix)
myData <- data.frame(patients, myMatrix)
myData
class(myData)
cnames <- c("patient","age","weight","bp","rating","test")
?colnames
colnames(myData) <- cnames
myData
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", "56b637a5baffac62cad9")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github", "56b637a5baffac62cad9")
myapp <- oauth_app("github", "56b637a5baffac62cad9")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "460390ea987d58e08416")
myapp <- oauth_app("github", "4975534de61153a9f9459fcd6061d46ac48983ba")
myapp <- oauth_app("github", "460390ea987d58e08416")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
?install
??install
install.packages(httpuv, ...)
install.packages(httpuv)
install.package("httpuv")
install.packages("httpuv")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
content(req)
install.packages("jsonlite")
content(req)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
content(req)
q()
submit()
submit()
source("pollutantmean.R")
source("complete.R"
)
source("complte.R")
source("complete.R")
source("corr.R)
)
")
source("corr.R")
q()
## pollutantmean() function code
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
len_id= length(id)          ## get the length of the id vector
len_id2 = len_id * 2       ## calculate the length of the square matrix required
## print("id=")
## print(id)
completedata <- c(id[1]:(id[1]+len_id2-1))    ## initialize the completedata matrix
dim(completedata) <- c(len_id, 2)                ## set dimensions for the  completedata matrix
if (pollutant == "sulfate") colNo <<- 2         ## "sulfate" pollutant column number
if (pollutant == "nitrate") colNo <<- 3         ## "sulfate" pollutant column number
cnt1 = 0                  ## initializing obs count
sum1 = 0                 ## initializing pollutant sum for all obs
for(i in 1:len_id)
{
pad = ""
nobs = 0
if (id[i] < 10) pad = "00"                          ## set file name padding when id is single digit
if (id[i] > 9 && id[i] < 100) pad = "0"         ## set file name padding when id is double digit
## print("id=")
## print(i)
## print("id[i]=")
## print(id[i])
path<-paste(directory,"/",pad,id[i],".csv",sep="")      ## set the path name
mydata<-read.csv(path)                                          ## read the corresponding csv file
d2 <- mydata[,colNo]                                              ## select the pollutant column
c1 <-sum(complete.cases(d2))                                  ## calculate count for complete cases
s1 <-sum(d2, na.rm=TRUE)
cnt1 <- cnt1 + c1               ## update the count of obs
sum1 <- sum1 + s1             ## update the pollutant sum of obs
i<-i+1
}
p1 = sum1/cnt1                ## calculate the mean
print(format(p1, digits=4))    ## trim trailing digits befor priniting
}
?hist
best <- function(state, outcome) {
## Initialize the valid state and outcome values
valid_state <- c("DC", "GU", "MP", "PR", "VI")   ## List of valid states
valid_outcome <-c("Heart Attack", "Heart Failure", "Pneumonia")  ## List of valid outcomes
## Check that state and outcome are valid
stateChk <- (state %in% valid_state)            ## checking for valid state
if (stateChk == "FALSE") {
errM <- "invalid state"
print (errM, quote=FALSE)
}
## Read outcome data
outcomeChk <- ( outcome %in% valid_outcome)  ## checking for valid outcome
if (outcomeChk == "FALSE") {
errM <- "invalid outcome"
print (errM, quote=FALSE)
}
bestOutcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
if (outcome == "heart attack")   col_no  <<- 11
if (outcome == "heart failure")  col_no  <<- 17
if (outcome == "pneumonia")   col_no  <<- 23
intM <- bestOutcome[, col_no]
intD <- data.frame(intM)
nobs <- sum(complete.cases(intD))
newL <- length(intD)
datV <- intD[complete.cases(intD), col_no]
minV <- min(datV)
namList <- datV[1]
## Return hospital name in that state with lowest 30-day death
for (i in 1:newL) {
if (datV[i] == minV)
rowName <<- i
I = i + 1
}
hospName <<- namList[rowName]
## rate
minRate <<- minV
}
q()
q()
install.packages()
install.packages(xlsx)
install.packages()
getwd()
library(xlsx)
q()
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
##     myapp <- oauth_app("github", "56b637a5baffac62cad9")
myapp <- oauth_app("github")
myapp <- oauth_app("github","6af110306161d178972d9ed619ea81079d7dc87c")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github", "2f6774276b99c4606d80")
myapp <- oauth_app("github","6af110306161d178972d9ed619ea81079d7dc87c")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
q()
q()
library(xlsx)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx "
dat <- read.xlsx(fileUrl,sheetIndex=1, rowIndex=1:4, colIndex=18:23)
sum(dat$Zip*dat$Ext,na.rm=T)
nstall.packages()
install.packages()
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx "
dat <- read.xlsx(fileUrl,sheetIndex=1, rowIndex=1:4, colIndex=18:23)
help(xlsx)
library(xlsx)
install.packages()
library(xlsx)
q()
library(xlsx)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx "
dat <- read.xlsx(fileUrl,sheetIndex=1, rowIndex=1:4, colIndex=18:23)
sum(dat$Zip*dat$Ext,na.rm=T)
install.packages()
library(xlsx)
install.packages("XLConnect", type="source")
library(xlsx)
q()
library(httr)
oauth_endpoints("github")
schatApp <- oauth_app("github","58fd278bcf1d84ad05dc", "f95152c758080302f596d8cff83a2e2b06ed7cda")
github_token <- oauth2.0_token(oauth_endpoints("github"), schatApp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
content(req)
schatApp <- oauth_app("github","58fd278bcf1d84ad05dc", "f95152c758080302f596d8cff83a2e2b06ed7cda")
github_token <- oauth2.0_token(oauth_endpoints("github"), schatApp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
q()
library(httr)
oauth_endpoints("github")
schatApp <- oauth_app("github","58fd278bcf1d84ad05dc", "f95152c758080302f596d8cff83a2e2b06ed7cda")
github_token <- oauth2.0_token(oauth_endpoints("github"), schatApp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
##     myapp <- oauth_app("github", "58fd278bcf1d84ad05dc")
schatApp <- oauth_app("github","58fd278bcf1d84ad05dc", "f95152c758080302f596d8cff83a2e2b06ed7cda")
## in the argument list after "github#, first the user_ID, then the secret access code
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), schatApp)
## 4. Use API
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
##     myapp <- oauth_app("github", "58fd278bcf1d84ad05dc")
schatApp <- oauth_app("github","58fd278bcf1d84ad05dc", "f95152c758080302f596d8cff83a2e2b06ed7cda")
## in the argument list after "github#, first the user_ID, then the secret access code
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), schatApp)
## 4. Use API
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
schatApp1 <- oauth_app("github","58fd278bcf1d84ad05dc", "f95152c758080302f596d8cff83a2e2b06ed7cda")
github_token <- oauth2.0_token(oauth_endpoints("github"), schatApp1)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
q()
?write
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
schatApp1 <- oauth_app("github","460390ea987d58e08416","4975534de61153a9f9459fcd6061d46ac48983ba")
github_token <- oauth2.0_token(oauth_endpoints("github"), schatApp1)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
req
content(req)
q()
plot(cars)
?lline
?llines
?axis()
install.packages()
install.packages()
install.packages()
install.packages()
install.packages()
install.packages()
library(plyr)
library(ggplot2)
?axis()
?text()
?label()
?hist()
q()
?strptime
?axis()
?Axiz
?Axis
?format
plot(1:7, rnorm(7), main = "axis() examples",
type = "s", xaxt = "n", frame = FALSE, col = "red")
axis(1, 1:7, LETTERS[1:7], col.axis = "blue")
axis(1, 1:7, LETTERS[1:7], col.axis = "blue")
axis(1,LETTERS[1:7], col.axis = "blue")
axis(1," ",LETTERS[1:7], col.axis = "blue")
q()
myT <- "12:30:01"
mT <- as.time(strptime(myT,format="%H:%M:%S"))
?colClasses
?colClass
?colclasses
?colclass
?class
?as.time
?as.date
?as.numeric
mT <-(strptime(myT,format="%H:%M:%S"))
mT
myT
myD <- "1/2/2007"
myD
myDT <- paste(myD,myT,sep=" ")
myDT
mDT <- strptime(myDT,format="%d/%m/%Y %H:%M:%S")
mDT
mDT <- as.date(strptime(myDT,format="%d/%m/%Y %H:%M:%S"))
mDT <- as.Date(strptime(myDT,format="%d/%m/%Y %H:%M:%S"))
mDT
mT <- as.Time(mT)
?plot
?axis
?legend
?par
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x = x, y = y)
dist(dataFrame)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
dataFrame <- data.frame(x = x, y = y)
set.seed(143)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
heatmap(dataMatrix)
par(mar = rep(0.2, 4))
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
dataFrame <- data.frame(x, y)
kmeansObj <- kmeans(dataFrame, centers = 3)
names(kmeansObj)
par(mar = rep(0.2, 4))
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
set.seed(1234)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
kmeansObj2 <- kmeans(dataMatrix, centers = 3)
par(mfrow = c(1, 2), mar = c(2, 4, 0.1, 0.1))
image(t(dataMatrix)[, nrow(dataMatrix):1], yaxt = "n")
image(t(dataMatrix)[, order(kmeansObj$cluster)], yaxt = "n")
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
par(mar = rep(0.2, 4))
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mfrow = c(1, 2), mar = c(2, 4, 0.1, 0.1))
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
?pch
?boxplot
?abline
?lines
?par
?plot
?smooth
?ggplot2
?summary
q()
installed.packages()
setwd("./Coursera/DataScienceTrack/Reproducible_research/Assignment_1")
file_act <- "activity"
fl1act   <- read.csv(file1_act,stringsAsFactors=FALSE)
file_act <- "activity"
fl1_act  <- read.csv(file_act,stringsAsFactors=FALSE)
getwd()
setwd("./Coursera/DataScienceTrack/Reproducible_research/Assignment_1")
getwd()
setwd("./Coursera/DataScienceTrack/Reproducible_research/Assignment_1")
setwd("~/Coursera/DataScienceTrack/Reproducible_reserach/Assignment_1")
file_act <- "activity.csv"
data_act  <- read.csv(file_act)
str(data_act)
data_act1 <- na.omit(data_act)  ## subset after removing NA data
str(data_act1)
mxst <- max(data_act1$steps)
mnst <- min(data_act1$steps)
mxst
mnst
sub1 <- NULL
sub1 <- data.frame(sub1)
sub1 <- data_act1[,c(1,2)]
head(sub1)
tail(sub1)
aggr1 <- aggregate(.~date, FUN=sum, sub1)
hist(as.numeric(aggr1$steps), col="red", breaks=50,
main= "Total number of steps taken each day",
xlab= "Total number of steps")
stp_mean <- mean(aggr1$steps)
stp_mean
stp_median <- median(aggr1$steps)
stp_median
Sub1 <- NULL
Sub1 <- data.frame(Sub1)
Sub1 <- data_act1[,c(1,3)]  ## select the steps and interval data
Aggr1 <- aggregate(.~interval, FUN=mean, Sub1)  ## calculate mean
with(Aggr1,                 ## plot the time series average data
plot(interval, steps,
panel.first = grid(),
type = 'l', col = "dark red",
ylab = "Steps",
xlab = "Intervals",
main = "Average number of steps for each 5-min interval"))
## (b) Determine the 5-min interval with the max number of steps
mxStp <- max(Aggr1$steps)
intvMaxStep <- subset(Aggr1, steps==mxStp)$interval
intvMaxStep
data_act2 <- subset(data_act, is.na(steps)==TRUE)  ## subset with NA data
ttlNAobs <- nrow(data_act2)   ## total no of observations with missing values
ttlNAobs
for(i in 1:ttlNAobs) {      ## Aggr1 contains the mean for each interval
intPl <- data_act2[i,3]   ## get the interval data & set the corresponding mean
data_act2[i,1] <- round(subset(Aggr1, interval==intPl)$steps)
}
str(data_act2)    ## check the structure
new_dat <- rbind(data_act1, data_act2)
str(new_dat)      ## check the structure of the new data frame
sub2 <- NULL
sub2 <- data.frame(sub2)
sub2 <- new_dat[,c(1,2)]
aggr1 <- aggregate(.~date, FUN=sum, sub2)
hist(aggr1$steps, col="red", breaks=50,
main= "Total number of steps taken each day",
xlab= "Total number of steps")
stn_mean <- mean(aggr1$steps)
stn_mean
stn_median <- median(aggr1$steps)
stn_median
dt1 <- new_dat[1,1]
dt1
dt1 <- new_dat[2,1]
dt1
dt1 <- new_dat[1,2]
dt1
n1 <- weekdays()
n1 <- weekdays(dt1)
n1 <- weekdays(dt1, abbreviate)
n1 <- weekdays(as.date(dt1), abbreviate)
dt1 <- new_dat[1,2]
dt1 <- date(dt1, %Y-%m-%d)
dt1 <- date(dt1, %Y-%b-%d)
dt1 <- date(dt1, "%Y-%b-%d"")
dt1 <- date(dt1, "%Y-%b-%d")
dt1 <- date(dt1)
Sys.setlocale("LC_TIME","English")  ## changing the locale to English
for(i in 1:ttlNAobs) {
dt1 <- weekdays(as.Date(new_dat[i,2]), abbreviate=TRUE) ## get the day of the week
if(dt1 == "Sat" | dt1 == "Sun")
new_dat$wkday[i] <- "weekend"
else
new_dat$wkday[i] <- "weekday"
}
new_dat$wkday <- as.factor(new_dat$wkday)
str(new_dat)  ## checking the structure of the new data set
## calculate the mean of each interval and weekdays level
Aggr3 <- aggregate(.~interval+wkday, FUN=mean, new_dat)
## make panel plot of the above data
library(lattice)
xyplot(steps~interval|wkday,
grid = TRUE,
type = "l", col = "dark red",
ylab = "Number of steps",
xlab = "Interval",
data = Aggr3,
layout = c(1,2))
setwd("~/Coursera/DataScienceTrack/Reproducible_reserach/RepData_PeerAssessment1")
The mean of the total number of steps taken per day is `r round(stp_mean)`    and the median of the total number os steps taken per day is `r round(stp_median)`.
